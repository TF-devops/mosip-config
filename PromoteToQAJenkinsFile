import hudson.EnvVars;
import hudson.slaves.EnvironmentVariablesNodeProperty;
import hudson.slaves.NodeProperty;
import hudson.slaves.NodePropertyDescriptor;
import hudson.util.DescribableList;
import jenkins.model.Jenkins;
node {
 // def mvnHome = tool name: 'M2_HOME', type: 'maven'
 def branch = env.NEXT_BRANCH_NAME
 def newVersion
 // Asking user if he wants to promote the code to QA, user will choose either proceed or abort
 stage('checkout') {
  input 'Do you want to promote the code to QA?'
  dir(branch) {
   checkout([$class: 'GitSCM',
    branches: [
     [name: branch]
    ],
    extensions: scm.extensions + [[$class: 'CleanCheckout']],
    userRemoteConfigs: [
     [url: 'git@github.com:mosip/mosip-configuration.git', credentialsId: 'aruna']
    ]
   ])
  }
 }
 stage('tag input'){
 def userInput = input(
    id: 'userInput', message: 'Enter tag version number', 
    parameters:[
    string(
      defaultValue: 'None',
      description: 'new tag version number',
      name: 'Version')
    ] 
    )
     // Save to variables. Default to empty string if not found.
   echo userInput 
    newVersion="${userInput}"
 }
 stage('GIT - Push the code and Create new tag') {
 dir(branch){
  sh "git checkout ${branch}"
   sh 'git status'
   sh 'ls'
  //sh 'echo "New tag Created with Build Number : ${BUILD_NUMBER}" >> status'
   //sh "git add ."
   //sh "git commit -m 'new branch created'"
  //sh "git push origin ${branch}" 
sh "git tag ${newVersion}"
      sshagent(['aruna']) {
      sh "git push origin ${newVersion}"
      }
      }
  // Clean the workspace to avoid GIT conflicts when next time this pipeline is triggered
  	cleanWs()
 }
}
